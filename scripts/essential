#!/bin/bash
# Setup essential tools for better experience
#
# Usage: curl -fsSL sh.mohitsingh.in/essential | bash

source /dev/stdin <<< "`curl -fsSL sh.mohitsingh.in/_utils`"

# Set timezone to +5:30
sudo ln -snf /usr/share/zoneinfo/Asia/Kolkata /etc/localtime && echo "Asia/Kolkata" | sudo tee /etc/timezone

# Add ppas
repo_missing "git" && sudo apt-add-repository ppa:git-core/ppa
repo_missing "neovim" && sudo add-apt-repository ppa:neovim-ppa/stable

sudo apt-get update
sudo apt-get upgrade -y
sudo apt-get remove -y git

sudo apt-get install -y\
  aria2\
  curl\
  httpie\
  jq\
  htop\
  p7zip-full\
  p7zip-rar\
  zip\
  unzip\
  tar\
  python3\
  python3-pip\
  python3-venv\
  tmux\
  neovim\
  git\
  zsh\
  zsh-syntax-highlighting\
  apt-transport-https\
  software-properties-common

# focal only packages
if [[ `lsb_release -cs` == 'focal' ]]; then
  sudo apt-get install zsh-autosuggestions
fi

function install_ripgrep {
  doing "Verifying ripgrep version..."
  RG_ENDPOINT="https://api.github.com/repos/BurntSushi/ripgrep/releases/latest"
  RG_LOCAL=`rg -V 2>/dev/null | rg '[\d.]+' -o 2>/dev/null |  head -n 1`
  RG_LATEST=`curl -sL $RG_ENDPOINT | jq -r '.name'`
  success
  if [[ "$RG_LATEST" == "$RG_LOCAL" ]]; then
    success_msg "Latest ripgrep is installed ( v$RG_LATEST )"
  else
    doing "Installing ripgrep v$RG_LATEST..."
    RG_URL=`curl -sL $RG_ENDPOINT | jq -r '.assets[].browser_download_url | select(endswith("deb"))'`
    curl -sL $RG_URL -o ripgrep.deb
    sudo dpkg -i ripgrep.deb
    rm ripgrep.deb
    success
  fi
}

function install_bat {
  doing "Verifying bat version..."
  BAT_ENDPOINT="https://api.github.com/repos/sharkdp/bat/releases/latest"
  BAT_LOCAL=`bat -V 2>/dev/null | rg '[\d.]+' -o 2>/dev/null |  head -n 1`
  BAT_LATEST=`curl -sL $BAT_ENDPOINT | jq -r '.name' | cut -b 2-`
  success
  if [[ "$BAT_LATEST" == "$BAT_LOCAL" ]]; then
    success_msg "Latest bat is installed ( v$BAT_LATEST )"
  else
    doing "Installing bat v$BAT_LATEST..."
    BAT_URL=`curl -sL $BAT_ENDPOINT | jq -r '.assets[].browser_download_url | select((endswith("amd64.deb")) and (contains("musl") | not))'`
    curl -sL $BAT_URL -o bat.deb
    sudo dpkg -i bat.deb
    rm bat.deb
    success
  fi
}

function install_exa {
  doing "Verifying exa version..."
  EXA_ENDPOINT="https://api.github.com/repos/ogham/exa/releases/latest"
  EXA_LOCAL=`exa -v 2>/dev/null | rg '[\d.]+' -o 2>/dev/null |  head -n 1`
  EXA_LATEST=`curl -sL $EXA_ENDPOINT | jq -r '.tag_name' | cut -b 2-`
  success
  if [[ "$EXA_LATEST" == "$EXA_LOCAL" ]]; then
    success_msg "Latest exa is installed ( v$EXA_LATEST )"
  else
    doing "Installing exa v$EXA_LATEST..."
    EXA_URL=`curl -sL $EXA_ENDPOINT | jq -r '.assets[].browser_download_url | select(contains("linux"))'`
    curl -sL $EXA_URL -o exa.zip
    unzip -qq exa.zip
    sudo install exa-linux-x86_64 /usr/local/bin/exa
    rm exa.zip exa-linux-x86_64
    success
  fi
}

function install_delta {
  doing "Verifying delta version..."
  DELTA_ENDPOINT="https://api.github.com/repos/dandavison/delta/releases/latest"
  DELTA_LOCAL=`delta -V 2>/dev/null | rg '[\d.]+' -o 2>/dev/null |  head -n 1`
  DELTA_LATEST=`curl -sL $DELTA_ENDPOINT | jq -r '.tag_name'`
  success
  if [[ "$DELTA_LATEST" == "$DELTA_LOCAL" ]]; then
    success_msg "Latest delta is installed ( v$DELTA_LATEST )"
  else
    doing "Installing delta v$DELTA_LATEST..."
    DELTA_URL=`curl -sL $DELTA_ENDPOINT | jq -r '.assets[].browser_download_url | select(endswith("amd64.deb"))'`
    curl -sL $DELTA_URL -o delta.deb
    sudo dpkg -i delta.deb
    rm delta.deb
    success
  fi
}

install_ripgrep
install_bat
install_exa
install_delta
